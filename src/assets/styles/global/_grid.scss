// mixins for width and margin calculation

@mixin width($width) {
  width: ($width / $number-of-columns) * 100%;
}
@mixin margin-left($width) {
  margin-left: ($width / $number-of-columns) * 100%;
}

.row {
  display: flex;
  flex-wrap: wrap;
  padding-left: $gutter;
  padding-right: $gutter;
  width: 100%;

  &.align-top {
    align-items: flex-start;
  }

  &.align-bottom {
    align-items: flex-end;
  }

  &.align-center {
    align-items: center;
  }

  &.flush {
    padding: 0;

    & > [class^="col-"]:not([class^="offset-"]) {
      padding: 0;
    }
  }

  &.justify-around {
    justify-content: space-around;
  }

  &.justify-between {
    justify-content: space-between;
  }
}

// base class
[class^="col-"] {
  padding: $gutter;
  box-sizing: border-box;

  &.align-top {
      align-self: flex-start;
  }

  &.align-bottom {
      align-self: flex-end;
  }

  &.align-center {
      align-self: center;
  }

  > .row {
      margin-left: calc($gutter * -1);
      margin-right: calc($gutter * -1);
  }
}

.col-auto {
  width: auto;
  &.centered {
    margin-left: auto;
    margin-right: auto;
  }
}

// generate classes based on grid variable
@for $i from 1 through $number-of-columns {

  @media screen and (max-width: $xs-max) {
    // base column sizes
    .col-#{$i}-xs {
      @include width($i);
    }
    // base offsets
    .offset-#{$i}-xs {
      @include margin-left($i);
    }
  }

  // sm
  @media screen and (min-width: $sm-break) and (max-width: $sm-max) {
    .col-#{$i}-sm {
      @include width($i);
    }
    .offset-#{$i}-sm {
      @include margin-left($i);
    }
  }

  // md
  @media screen and (min-width: $md-break) and (max-width: $md-max) {
    .col-#{$i}-md {
      @include width($i);
    }
    .offset-#{$i}-md {
      @include margin-left($i);
    }
  }

  // lg
  @media screen and (min-width: $lg-break) {
    .col-#{$i}-lg {
      @include width($i);
    }
    .offset-#{$i}-lg {
      @include margin-left($i);
    }
  }
}